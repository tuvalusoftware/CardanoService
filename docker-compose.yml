version: "3.8"

services:
  cardanoredis:
    image: redis:latest
    restart: always
    container_name: cardanoredis
    ports:
      - 6379:6379
    expose:
      - 6379
    command: redis-server --requirepass ${REDIS_PASSWORD}
    healthcheck:
      test: redis-cli ping
      interval: 30s
      timeout: 30s
      retries: 3
    networks:
      - cardanonetwork

  cardanorabbitmq:
    container_name: cardanorabbitmq
    image: rabbitmq:3.12-management
    restart: always
    ports:
      - 5672:5672
      - 15672:15672
    expose:
      - 5672
      - 15672
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3
    networks:
      - cardanonetwork

  # Cardano Service
  cardanoservice:
    image: cardanoservice
    container_name: cardanoservice
    restart: always
    build:
      context: .
      dockerfile: ./Dockerfile
    environment:
      NODE_ENV: development
      PORT: ${PORT}
      MAX_PORT: ${MAX_PORT}
      CHANNEL_NAME: ${CHANNEL_NAME}
      NETWORD_NAME: ${NETWORD_NAME}
      SENDER_ADA: ${SENDER_ADA}
      HOLDER_MNEMONIC: ${HOLDER_MNEMONIC}
      BURNER_MNEMONIC: ${BURNER_MNEMONIC}
      RABBITMQ_DEFAULT_VHOST: ${RABBITMQ_DEFAULT_VHOST}
      RABBITMQ_DEFAULT_PORT: ${RABBITMQ_DEFAULT_PORT}
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    ports:
      - 3050:3050
    expose:
      - 3050
    depends_on:
      cardanorabbitmq:
        condition: service_healthy
      cardanoredis:
        condition: service_healthy
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - cardanonetwork

networks:
  cardanonetwork:
    driver: bridge
