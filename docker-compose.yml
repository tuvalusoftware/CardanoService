version: "3.8"

services:
  cardanoredis:
    image: redis:latest
    restart: always
    container_name: cardanoredis
    ports:
      - 6379:6379
    expose:
      - 6379
    command: redis-server --requirepass ${REDIS_PASSWORD}
    healthcheck:
      test: redis-cli ping
      interval: 5s
      timeout: 5s
      retries: 3
    volumes:
      - redis-data:/data
    networks:
      - cardanonetwork

  cardanorabbitmq:
    container_name: cardanorabbitmq
    image: rabbitmq:3.12-management
    restart: always
    ports:
      - 5672:5672
      - 15672:15672
    expose:
      - 5672
      - 15672
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 10s
      timeout: 10s
      retries: 3
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
      - rabbitmq-log:/var/log/rabbitmq
      - rabbitmq-conf:/etc/rabbitmq
    networks:
      - cardanonetwork

  # Cardano Service
  # cardanoservice:
  #   image: cardanoservice
  #   # container_name: cardanoservice
  #   restart: always
  #   deploy:
  #     mode: replicated
  #     replicas: 3
  #     restart_policy:
  #       condition: on-failure
  #   build:
  #     context: .
  #     dockerfile: ./Dockerfile
  #   environment:
  #     NODE_ENV: development
  #     PORT: 3050
  #     BASE_PORT: 3050
  #     MAX_PORT: 3050
  #     MAESTRO_API_KEY: ${MAESTRO_API_KEY}
  #     BLOCKFORST_API_KEY: ${BLOCKFORST_API_KEY}
  #     MNEMONIC_FILENAME: ${MNEMONIC_FILENAME}
  #     CHANNEL_NAME: "CardanoService"
  #     NETWORD_NAME: ${NETWORD_NAME}
  #     SENDER_ADA: ${SENDER_ADA}
  #     HOLDER_MNEMONIC: ${HOLDER_MNEMONIC}
  #     BURNER_MNEMONIC: ${BURNER_MNEMONIC}
  #     RABBITMQ_DEFAULT_VHOST: ${RABBITMQ_DEFAULT_VHOST}
  #     RABBITMQ_DEFAULT_PORT: ${RABBITMQ_DEFAULT_PORT}
  #     RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
  #     RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
  #     REDIS_HOST: ${REDIS_HOST}
  #     REDIS_PORT: ${REDIS_PORT}
  #     REDIS_PASSWORD: ${REDIS_PASSWORD}
  #   # ports:
  #   #   - 3050:3050
  #   # expose:
  #   #   - 3050
  #   depends_on:
  #     cardanorabbitmq:
  #       condition: service_healthy
  #     cardanoredis:
  #       condition: service_healthy
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  #   networks:
  #     - cardanonetwork

  # # Cardano Error Service
  # cardanoerrorservice:
  #   image: cardanoservice
  #   # container_name: cardanoerrorservice
  #   restart: always
  #   deploy:
  #     mode: replicated
  #     replicas: 1
  #     restart_policy:
  #       condition: on-failure
  #   build:
  #     context: .
  #     dockerfile: ./Dockerfile
  #   environment:
  #     NODE_ENV: development
  #     PORT: 4050
  #     BASE_PORT: 4050
  #     MAX_PORT: 4050
  #     MAESTRO_API_KEY: ${MAESTRO_API_KEY}
  #     BLOCKFORST_API_KEY: ${BLOCKFORST_API_KEY}
  #     MNEMONIC_FILENAME: ${MNEMONIC_FILENAME}
  #     CHANNEL_NAME: "CardanoErrorService"
  #     NETWORD_NAME: ${NETWORD_NAME}
  #     SENDER_ADA: ${SENDER_ADA}
  #     HOLDER_MNEMONIC: ${HOLDER_MNEMONIC}
  #     BURNER_MNEMONIC: ${BURNER_MNEMONIC}
  #     RABBITMQ_DEFAULT_VHOST: ${RABBITMQ_DEFAULT_VHOST}
  #     RABBITMQ_DEFAULT_PORT: ${RABBITMQ_DEFAULT_PORT}
  #     RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
  #     RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
  #     REDIS_HOST: ${REDIS_HOST}
  #     REDIS_PORT: ${REDIS_PORT}
  #     REDIS_PASSWORD: ${REDIS_PASSWORD}
  #   # ports:
  #   #   - 4050:4050
  #   # expose:
  #   #   - 4050
  #   depends_on:
  #     cardanorabbitmq:
  #       condition: service_healthy
  #     cardanoredis:
  #       condition: service_healthy
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  #   networks:
  #     - cardanonetwork

  # # Cardano Contract Service
  # cardanocontractservice:
  #   image: cardanoservice
  #   # container_name: cardanocontractservice
  #   restart: always
  #   deploy:
  #     mode: replicated
  #     replicas: 3
  #     restart_policy:
  #       condition: on-failure
  #   build:
  #     context: .
  #     dockerfile: ./Dockerfile
  #   environment:
  #     NODE_ENV: development
  #     PORT: 5050
  #     BASE_PORT: 5050
  #     MAX_PORT: 5050
  #     MAESTRO_API_KEY: ${MAESTRO_API_KEY}
  #     BLOCKFORST_API_KEY: ${BLOCKFORST_API_KEY}
  #     MNEMONIC_FILENAME: ${MNEMONIC_FILENAME}
  #     CHANNEL_NAME: "CardanoContractService"
  #     NETWORD_NAME: ${NETWORD_NAME}
  #     SENDER_ADA: ${SENDER_ADA}
  #     HOLDER_MNEMONIC: ${HOLDER_MNEMONIC}
  #     BURNER_MNEMONIC: ${BURNER_MNEMONIC}
  #     RABBITMQ_DEFAULT_VHOST: ${RABBITMQ_DEFAULT_VHOST}
  #     RABBITMQ_DEFAULT_PORT: ${RABBITMQ_DEFAULT_PORT}
  #     RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
  #     RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
  #     REDIS_HOST: ${REDIS_HOST}
  #     REDIS_PORT: ${REDIS_PORT}
  #     REDIS_PASSWORD: ${REDIS_PASSWORD}
  #   # ports:
  #   #   - 5050:5050
  #   # expose:
  #   #   - 5050
  #   depends_on:
  #     cardanorabbitmq:
  #       condition: service_healthy
  #     cardanoredis:
  #       condition: service_healthy
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  #   networks:
  #     - cardanonetwork

networks:
  cardanonetwork:
    driver: bridge

volumes:
  redis-data:
  rabbitmq-data:
  rabbitmq-log:
  rabbitmq-conf:
